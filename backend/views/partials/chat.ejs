<style>
	.chat-container {
		position: fixed;
		display: block;
		bottom: 40px;
		left: 0;
		max-width: 700px;
		width: 300px;
		height: 300px;
		background: linear-gradient(to top, rgb(255, 187, 0), rgb(255, 119, 0));
		border-radius: 10px;
	}

	.chat-area {
		color: rgb(255, 255, 255);
		height: 100%;
		overflow-y: scroll;
		overflow-x: hidden;
		font-size: 12px;
	}
	#messages > p {
		font-size: 14px;
		margin: 15px;
	}

	.chat-form {
		display: flex;
	}

	.chat-form > input {
		flex: 1;
		font-size: 14px;
		border-radius: 10px;
		padding: 10px;
		border-color: aqua;
		border-width: 1px;
	}
</style>

<div class="chat-container">
	<div id="messages" class="chat-area">
		<!-- Chat messages will be displayed here -->
	</div>
	<form class="chat-form" id="chatForm" action="">
		<input id="input" autocomplete="off" placeholder="Chat" />
	</form>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
	const socket = io()

	const form = document.getElementById('chatForm')
	const input = document.getElementById('input')
	const messages = document.getElementById('messages')
	const user = "<%= session.user ? session.user['username'] : 'Guest' %>"
	const roomId = '<%= roomId %>' // This assumes you pass `roomId` when rendering the EJS

	socket.emit('join room', roomId) // Joining a specific room

	form.addEventListener('submit', (e) => {
		e.preventDefault()
		if (input.value) {
			socket.emit('chat message', {room: roomId, user: user, message: input.value})
			input.value = ''
			input.focus()
		}
	})

	socket.on('chat message', (msg) => {
		if (msg.room === roomId) {
			const item = document.createElement('p')
			item.textContent = msg.user + ': ' + msg.message
			messages.appendChild(item)
		}
	})
</script>
